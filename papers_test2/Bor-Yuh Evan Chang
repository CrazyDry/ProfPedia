Synthesizing Short-Circuiting Validation of Data Structure Invariants

  This paper presents incremental verification-validation, a novel approach forchecking rich data structure invariants expressed as separation logicassertions. Incremental verification-validation combines static verification ofseparation properties with efficient, short-circuiting dynamic validation ofarbitrarily rich data constraints. A data structure invariant checker is aninductive predicate in separation logic with an executable interpretation; ashort-circuiting checker is an invariant checker that stops checking wheneverit detects at run time that an assertion for some sub-structure has been fullyproven statically. At a high level, our approach does two things: it staticallyproves the separation properties of data structure invariants using a staticshape analysis in a standard way but then leverages this proof in a novelmanner to synthesize short-circuiting dynamic validation of the dataproperties. As a consequence, we enable dynamic validation to make up forimprecision in sound static analysis while simultaneously leveraging the staticverification to make the remaining dynamic validation efficient. We showempirically that short-circuiting can yield asymptotic improvements in dynamicvalidation, with low overhead over no validation, even in cases where staticverification is incomplete.

Abstracting Event-Driven Systems with Lifestate Rules

  We present lifestate rules--an approach for abstracting event-driven objectprotocols. Developing applications against event-driven software frameworks isnotoriously difficult. One reason why is that to create functioningapplications, developers must know about and understand the complex protocolsthat abstract the internal behavior of the framework. Such protocols intertwinethe proper registering of callbacks to receive control from the framework withappropriate application programming interface (API) calls to delegate back toit. Lifestate rules unify lifecycle and typestate constraints in one commonspecification language. Our primary contribution is a model of event-drivensystems from which lifestate rules can be derived. We then apply specificationmining techniques to learn lifestate specifications for Android frameworktypes. In the end, our implementation is able to find several rules thatcharacterize actual behavior of the Android framework.


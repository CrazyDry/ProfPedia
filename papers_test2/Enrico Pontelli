A Constructive Semantic Characterization of Aggregates in ASP

  This technical note describes a monotone and continuous fixpoint operator tocompute the answer sets of programs with aggregates. The fixpoint operatorrelies on the notion of aggregate solution. Under certain conditions, thisoperator behaves identically to the three-valued immediate consequence operator$\Phi^{aggr}_P$ for aggregate programs, independently proposed Pelov et al.This operator allows us to closely tie the computational complexity of theanswer set checking and answer sets existence problems to the cost of checkinga solution of the aggregates in the program. Finally, we relate the semanticsdescribed by the operator to other proposals for logic programming withaggregates.  To appear in Theory and Practice of Logic Programming (TPLP).

An Unfolding-Based Semantics for Logic Programming with Aggregates

  The paper presents two equivalent definitions of answer sets for logicprograms with aggregates. These definitions build on the notion of unfolding ofaggregates, and they are aimed at creating methodologies to translate logicprograms with aggregates to normal logic programs or positive programs, whoseanswer set semantics can be used to defined the semantics of the originalprograms. The first definition provides an alternative view of the semanticsfor logic programming with aggregates described by Pelov et al.  The second definition is similar to the traditional answer set definition fornormal logic programs, in that, given a logic program with aggregates and aninterpretation, the unfolding process produces a positive program. The papershows how this definition can be extended to consider aggregates in the head ofthe rules.  The proposed views of logic programming with aggregates are simple andcoincide with the ultimate stable model semantics, and with other semanticcharacterizations for large classes of program (e.g., programs with monotoneaggregates and programs that are aggregate-stratified).  Moreover, it can be directly employed to support an implementation usingavailable answer set solvers. The paper describes a system, called ASP^A, thatis capable of computing answer sets of programs with arbitrary (e.g.,recursively defined) aggregates.

Logic Programming for Finding Models in the Logics of Knowledge and its  Applications: A Case Study

  The logics of knowledge are modal logics that have been shown to be effectivein representing and reasoning about knowledge in multi-agent domains.Relatively few computational frameworks for dealing with computation of modelsand useful transformations in logics of knowledge (e.g., to support multi-agentplanning with knowledge actions and degrees of visibility) have been proposed.This paper explores the use of logic programming (LP) to encode interestingforms of logics of knowledge and compute Kripke models. The LP modeling isexpanded with useful operators on Kripke structures, to support multi-agentplanning in the presence of both world-altering and knowledge actions. Thisresults in the first ever implementation of a planner for this type of complexmulti-agent domains.

The Collaborative Virtual Affinity Group Model: Principles and Design

  The problem addressed in this paper is the challenge arising in enablingcollaborative learning in the context distance education models. While researchhas made quantum leaps in the development of both effective collaborativepedagogical models as well as online learning environments, the research at theintersection of these two areas has been scarce. This paper presents the designfor a new collaborative virtual model, named Collaborative Virtual AffinityGroup model (CVAG), which is an extension of the successful Affinity GroupResearch (ARG) model. The new model provides an integration of the principlesunderlying ARG with the traditional principles of virtual learningenvironments. The CVAG model is explored in the context of introductoryComputer Science courses|where students are focused on learning the basicprinciples of computer programming.

Planning with Preferences using Logic Programming

  We present a declarative language, PP, for the high-level specification ofpreferences between possible solutions (or trajectories) of a planning problem.This novel language allows users to elegantly express non-trivial,multi-dimensional preferences and priorities over such preferences. Thesemantics of PP allows the identification of most preferred trajectories for agiven goal. We also provide an answer set programming implementation ofplanning problems with PP preferences.

Multi-valued Action Languages in CLP(FD)

  Action description languages, such as A and B, are expressive instrumentsintroduced for formalizing planning domains and planning problem instances. Thepaper starts by proposing a methodology to encode an action language (withconditional effects and static causal laws), a slight variation of B, usingConstraint Logic Programming over Finite Domains. The approach is thengeneralized to raise the use of constraints to the level of the action languageitself. A prototype implementation has been developed, and the preliminaryresults are presented and discussed.  To appear in Theory and Practice of Logic Programming (TPLP)

An Implementation of Bubbling

  Non-determinism is of great importance in functional logic programming. Itprovides expressiveness and efficiency to functional logic computations. Inthis paper we describe an implementation of the multi-paradigm functional logiclanguage Curry. The evaluation strategy employed by the implementation is basedon definitional trees and needed narrowing for deterministic operations, whilenon-deterministic operations will depend on the graph transformation, bubbling.Bubbling preserves the completeness of non-deterministic operations and avoidsunnecessary large-scale reconstruction of expressions done by other approaches.

Set Unification

  The unification problem in algebras capable of describing sets has beentackled, directly or indirectly, by many researchers and it finds importantapplications in various research areas--e.g., deductive databases, theoremproving, static analysis, rapid software prototyping. The various solutionsproposed are spread across a large literature. In this paper we provide auniform presentation of unification of sets, formalizing it at the level of settheory. We address the problem of deciding existence of solutions at anabstract level. This provides also the ability to classify different types ofset unification problems. Unification algorithms are uniformly proposed tosolve the unification problem in each of such classes.  The algorithms presented are partly drawn from the literature--and properlyrevisited and analyzed--and partly novel proposals. In particular, we present anew goal-driven algorithm for general ACI1 unification and a new simpleralgorithm for general (Ab)(Cl) unification.

Justifications for Logic Programs under Answer Set Semantics

  The paper introduces the notion of off-line justification for Answer SetProgramming (ASP). Justifications provide a graph-based explanation of thetruth value of an atom w.r.t. a given answer set. The paper extends also thisnotion to provide justification of atoms during the computation of an answerset (on-line justification), and presents an integration of on-linejustifications within the computation model of Smodels. Off-line and on-linejustifications provide useful tools to enhance understanding of ASP, and theyoffer a basic data structure to support methodologies and tools for debugginganswer set programs. A preliminary implementation has been developed inASP-PROLOG.  (To appear in Theory and Practice of Logic Programming (TPLP))

CLP-based protein fragment assembly

  The paper investigates a novel approach, based on Constraint LogicProgramming (CLP), to predict the 3D conformation of a protein via fragmentsassembly. The fragments are extracted by a preprocessor-also developed for thiswork- from a database of known protein structures that clusters and classifiesthe fragments according to similarity and frequency. The problem of assemblingfragments into a complete conformation is mapped to a constraint solvingproblem and solved using CLP. The constraint-based model uses a mediumdiscretization degree Ca-side chain centroid protein model that offersefficiency and a good approximation for space filling. The approach adaptsexisting energy models to the protein representation used and applies a largeneighboring search strategy. The results shows the feasibility and efficiencyof the method. The declarative nature of the solution allows to include futureextensions, e.g., different size fragments for better accuracy.

Autonomous Agents Coordination: Action Languages meet CLP(FD) and Linda

  The paper presents a knowledge representation formalism, in the form of ahigh-level Action Description Language for multi-agent systems, whereautonomous agents reason and act in a shared environment. Agents areautonomously pursuing individual goals, but are capable of interacting througha shared knowledge repository. In their interactions through shared portions ofthe world, the agents deal with problems of synchronization and concurrency;the action language allows the description of strategies to ensure a consistentglobal execution of the agents' autonomously derived plans. A distributedplanning problem is formalized by providing the declarative specifications ofthe portion of the problem pertaining a single agent. Each of thesespecifications is executable by a stand-alone CLP-based planner. Thecoordination among agents exploits a Linda infrastructure. The proposal isvalidated in a prototype implementation developed in SICStus Prolog.  To appear in Theory and Practice of Logic Programming (TPLP).

Logic and Constraint Logic Programming for Distributed Constraint  Optimization

  The field of Distributed Constraint Optimization Problems (DCOPs) has gainedmomentum, thanks to its suitability in capturing complex problems (e.g.,multi-agent coordination and resource allocation problems) that are naturallydistributed and cannot be realistically addressed in a centralized manner. Thestate of the art in solving DCOPs relies on the use of ad-hoc infrastructuresand ad-hoc constraint solving procedures. This paper investigates aninfrastructure for solving DCOPs that is completely built on logic programmingtechnologies. In particular, the paper explores the use of a general constraintsolver (a constraint logic programming system in this context) to handle theagent-level constraint solving. The preliminary experiments show that logicprogramming provides benefits over a state-of-the-art DCOP system, in terms ofperformance and scalability, opening the doors to the use of more advancedtechnology (e.g., search strategies and complex constraints) for solving DCOPs.

Distributed Constraint Optimization Problems and Applications: A Survey

  The field of Multi-Agent System (MAS) is an active area of research withinArtificial Intelligence, with an increasingly important impact in industrialand other real-world applications. Within a MAS, autonomous agents interact topursue personal interests and/or to achieve common objectives. DistributedConstraint Optimization Problems (DCOPs) have emerged as one of the prominentagent architectures to govern the agents' autonomous behavior, where bothalgorithms and communication models are driven by the structure of the specificproblem. During the last decade, several extensions to the DCOP model haveenabled them to support MAS in complex, real-time, and uncertain environments.This survey aims at providing an overview of the DCOP model, giving aclassification of its multiple extensions and addressing both resolutionmethods and applications that find a natural mapping within each class ofDCOPs. The proposed classification suggests several future perspectives forDCOP extensions, and identifies challenges in the design of efficientresolution algorithms, possibly through the adaptation of strategies fromdifferent areas.

Solving DCOPs with Distributed Large Neighborhood Search

  The field of Distributed Constraint Optimization has gained momentum inrecent years, thanks to its ability to address various applications related tomulti-agent cooperation. Nevertheless, solving Distributed ConstraintOptimization Problems (DCOPs) optimally is NP-hard. Therefore, in large-scale,complex applications, incomplete DCOP algorithms are necessary. Currentincomplete DCOP algorithms suffer of one or more of the following limitations:they (a) find local minima without providing quality guarantees; (b) provideloose quality assessment; or (c) are unable to benefit from the structure ofthe problem, such as domain-dependent knowledge and hard constraints.Therefore, capitalizing on strategies from the centralized constraint solvingcommunity, we propose a Distributed Large Neighborhood Search (D-LNS) frameworkto solve DCOPs. The proposed framework (with its novel repair phase) providesguarantees on solution quality, refining upper and lower bounds during theiterative process, and can exploit domain-dependent structures. Ourexperimental results show that D-LNS outperforms other incomplete DCOPalgorithms on both structured and unstructured problem instances.

A Realistic Dataset for the Smart Home Device Scheduling Problem for  DCOPs

  The field of Distributed Constraint Optimization has gained momentum inrecent years thanks to its ability to address various applications related tomulti-agent cooperation. While techniques to solve Distributed ConstraintOptimization Problems (DCOPs) are abundant and have matured substantially sincethe field inception, the number of DCOP realistic applications and benchmarkused to asses the performance of DCOP algorithms is lagging behind. To contrastthis background we (i) introduce the Smart Home Device Scheduling (SHDS)problem, which describe the problem of coordinating smart devices schedulesacross multiple homes as a multi-agent system, (ii) detail the physical modelsadopted to simulate smart sensors, smart actuators, and homes environments, and(iii) introduce a DCOP realistic benchmark for SHDS problems.

Solving Distributed Constraint Optimization Problems Using Logic  Programming

  This paper explores the use of Answer Set Programming (ASP) in solvingDistributed Constraint Optimization Problems (DCOPs). The paper provides thefollowing novel contributions: (1) It shows how one can formulate DCOPs aslogic programs; (2) It introduces ASP-DPOP, the first DCOP algorithm that isbased on logic programming; (3) It experimentally shows that ASP-DPOP can be upto two orders of magnitude faster than DPOP (its imperative programmingcounterpart) as well as solve some problems that DPOP fails to solve, due tomemory limitations; and (4) It demonstrates the applicability of ASP in a widearray of multi-agent problems currently modeled as DCOPs. Under considerationin Theory and Practice of Logic Programming (TPLP).

PALS: Efficient Or-Parallelism on Beowulf Clusters

  This paper describes the development of the PALS system, an implementation ofProlog capable of efficiently exploiting or-parallelism on distributed-memoryplatforms--specifically Beowulf clusters. PALS makes use of a novel technique,called incremental stack-splitting. The technique proposed builds on thestack-splitting approach, previously described by the authors andexperimentally validated on shared-memory systems, which in turn is anevolution of the stack-copying method used in a variety of parallel logic andconstraint systems--e.g., MUSE, YAP, and Penny. The PALS system is the firstdistributed or-parallel implementation of Prolog based on the stack-splittingmethod ever realized. The results presented confirm the superiority of thismethod as a simple yet effective technique to transition from shared-memory todistributed-memory systems. PALS extends stack-splitting by combining it withincremental copying; the paper provides a description of the implementation ofPALS, including details of how distributed scheduling is handled. We alsoinvestigate methodologies to effectively support order-sensitive predicates(e.g., side-effects) in the context of the stack-splitting scheme. Experimentalresults obtained from running PALS on both Shared Memory and Beowulf systemsare presented and analyzed.

Accelerating Exact and Approximate Inference for (Distributed) Discrete  Optimization with GPUs

  Discrete optimization is a central problem in artificial intelligence. Theoptimization of the aggregated cost of a network of cost functions arises in avariety of problems including (W)CSP, DCOP, as well as optimization instochastic variants such as the tasks of finding the most probable explanation(MPE) in belief networks. Inference-based algorithms are powerful techniquesfor solving discrete optimization problems, which can be used independently orin combination with other techniques. However, their applicability is oftenlimited by their compute intensive nature and their space requirements. Thispaper proposes the design and implementation of a novel inference-basedtechnique, which exploits modern massively parallel architectures, such asthose found in Graphical Processing Units (GPUs), to speed up the resolution ofexact and approximated inference-based algorithms for discrete optimization.The paper studies the proposed algorithm in both centralized and distributedoptimization contexts. The paper demonstrates that the use of GPUs providessignificant advantages in terms of runtime and scalability, achieving up to twoorders of magnitude in speedups and showing a considerable reduction inexecution time (up to 345 times faster) with respect to a sequential version.

Phylotastic: An Experiment in Creating, Manipulating, and Evolving  Phylogenetic Biology Workflows Using Logic Programming

  Evolutionary Biologists have long struggled with the challenge of developinganalysis workflows in a flexible manner, thus facilitating the reuse ofphylogenetic knowledge. An evolutionary biology workflow can be viewed as aplan which composes web services that can retrieve, manipulate, and producephylogenetic trees. The Phylotastic project was launched two years ago as acollaboration between evolutionary biologists and computer scientists, with thegoal of developing an open architecture to facilitate the creation of suchanalysis workflows. While composition of web services is a problem that hasbeen extensively explored in the literature, including within the logicprogramming domain, the incarnation of the problem in Phylotastic provides anumber of additional challenges. Along with the need to integrate preferencesand formal ontologies in the description of the desired workflow, evolutionarybiologists tend to construct workflows in an incremental manner, bysuccessively refining the workflow, by indicating desired changes (e.g.,exclusion of certain services, modifications of the desired output). This leadsto the need of successive iterations of incremental replanning, to develop anew workflow that integrates the requested changes while minimizing the changesto the original workflow. This paper illustrates how Phylotastic has addressedthe challenges of creating and refining phylogenetic analysis workflows usinglogic programming technology and how such solutions have been used within thegeneral framework of the Phylotastic project. Under consideration in Theory andPractice of Logic Programming (TPLP).

An Action Language for Multi-Agent Domains: Foundations

  In multi-agent domains (MADs), an agent's action may not just change theworld and the agent's knowledge and beliefs about the world, but also maychange other agents' knowledge and beliefs about the world and their knowledgeand beliefs about other agents' knowledge and beliefs about the world. Thegoals of an agent in a multi-agent world may involve manipulating the knowledgeand beliefs of other agents' and again, not just their knowledge/belief aboutthe world, but also their knowledge about other agents' knowledge about theworld. Our goal is to present an action language (mA+) that has the necessaryfeatures to address the above aspects in representing and RAC in MADs. mA+allows the representation of and reasoning about different types of actionsthat an agent can perform in a domain where many other agents might bepresent---such as world-altering actions, sensing actions, andannouncement/communication actions. It also allows the specification of agents'dynamic awareness of action occurrences which has future implications on whatagents' know about the world and other agents' knowledge about the world. mA+considers three different types of awareness: full,- partial- awareness, andcomplete oblivion of an action occurrence and its effects. This keeps thelanguage simple, yet powerful enough to address a large variety of knowledgemanipulation scenarios in MADs. The semantics of mA+ relies on the notion ofstate, which is described by a pointed Kripke model and is used to encode theagent's knowledge and the real state of the world. It is defined by atransition function that maps pairs of actions and states into sets of states.We illustrate properties of the action theories, including properties thatguarantee finiteness of the set of initial states and their practicalimplementability. Finally, we relate mA+ to other related formalisms thatcontribute to RAC in MADs.


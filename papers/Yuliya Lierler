Abstract Answer Set Solvers with Learning

  Nieuwenhuis, Oliveras, and Tinelli (2006) showed how to describe enhancementsof the Davis-Putnam-Logemann-Loveland algorithm using transition systems,instead of pseudocode. We design a similar framework for several algorithmsthat generate answer sets for logic programs: Smodels, Smodels-cc, Asp-Sat withLearning (Cmodels), and a newly designed and implemented algorithm Sup. Thisapproach to describing answer set solvers makes it easier to prove theircorrectness, to compare them, and to design new systems.

Strong Equivalence and Program's Structure in Arguing Essential  Equivalence between Logic Programs

  Answer set programming is a prominent declarative programming paradigm usedin formulating combinatorial search problems and implementing distinctknowledge representation formalisms. It is common that several related and yetsubstantially different answer set programs exist for a given problem.Sometimes these encodings may display significantly different performance.Uncovering {\em precise formal} links between these programs is often importantand yet far from trivial. This paper claims the correctness of a number ofinteresting program rewritings.

Representing First-Order Causal Theories by Logic Programs

  Nonmonotonic causal logic, introduced by Norman McCain and Hudson Turner,became a basis for the semantics of several expressive action languages.McCain's embedding of definite propositional causal theories into logicprogramming paved the way to the use of answer set solvers for answeringqueries about actions described in such languages. In this paper we extend thisembedding to nondefinite theories and to first-order causal logic.

Proceedings of Answer Set Programming and Other Computing Paradigms  (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest,  Hungary

  This volume contains the papers presented at the fifth workshop on Answer SetProgramming and Other Computing Paradigms (ASPOCP 2012) held on September 4th,2012 in Budapest, co-located with the 28th International Conference on LogicProgramming (ICLP 2012). It thus continues a series of previous eventsco-located with ICLP, aiming at facilitating the discussion about crossing theboundaries of current ASP techniques in theory, solving, and applications, incombination with or inspired by other computing paradigms.

Abstract Modular Systems and Solvers

  Integrating diverse formalisms into modular knowledge representation systemsoffers increased expressivity, modeling convenience and computational benefits.We introduce concepts of abstract modules and abstract modular systems to studygeneral principles behind the design and analysis of model-finding programs, orsolvers, for integrated heterogeneous multi-logic systems. We show how abstractmodules and abstract modular systems give rise to transition systems, which area natural and convenient representation of solvers pioneered by the SATcommunity. We illustrate our approach by showing how it applies to answer setprogramming and propositional logic, and to multi-logic systems based on thesetwo formalisms.

Proceedings of Answer Set Programming and Other Computing Paradigms  (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey

  This volume contains the papers presented at the sixth workshop on Answer SetProgramming and Other Computing Paradigms (ASPOCP 2013) held on August 25th,2013 in Istanbul, co-located with the 29th International Conference on LogicProgramming (ICLP 2013). It thus continues a series of previous eventsco-located with ICLP, aiming at facilitating the discussion about crossing theboundaries of current ASP techniques in theory, solving, and applications, incombination with or inspired by other computing paradigms.

The informal semantics of Answer Set Programming: A Tarskian perspective

  In Knowledge Representation, it is crucial that knowledge engineers have agood understanding of the formal expressions that they write. What formalexpressions state intuitively about the domain of discourse is studied in thetheory of the informal semantics of a logic. In this paper we study theinformal semantics of Answer Set Programming. The roots of answer setprogramming lie in the language of Extended Logic Programming, which wasintroduced initially as an epistemic logic for default and autoepistemicreasoning. In 1999, the seminal papers on answer set programming proposed touse this logic for a different purpose, namely, to model and solve searchproblems. Currently, the language is used primarily in this new role. However,the original epistemic intuitions lose their explanatory relevance in this newcontext. How answer set programs are connected to the specifications ofproblems they model is more easily explained in a classical Tarskian semantics,in which models correspond to possible worlds, rather than to belief states ofan epistemic agent. In this paper, we develop a new theory of the informalsemantics of answer set programming, which is formulated in the Tarskiansetting and based on Frege's compositionality principle. It differssubstantially from the earlier epistemic theory of informal semantics,providing a different view on the meaning of the connectives in answer setprogramming and on its relation to other logics, in particular classical logic.

On Elementary Loops of Logic Programs

  Using the notion of an elementary loop, Gebser and Schaub refined the theoremon loop formulas due to Lin and Zhao by considering loop formulas of elementaryloops only. In this article, we reformulate their definition of an elementaryloop, extend it to disjunctive programs, and study several properties ofelementary loops, including how maximal elementary loops are related to minimalunfounded sets. The results provide useful insights into the stable modelsemantics in terms of elementary loops. For a nondisjunctive program, using agraph-theoretic characterization of an elementary loop, we show that theproblem of recognizing an elementary loop is tractable. On the other hand, weshow that the corresponding problem is {\sf coNP}-complete for a disjunctiveprogram. Based on the notion of an elementary loop, we present the class ofHead-Elementary-loop-Free (HEF) programs, which strictly generalizes the classof Head-Cycle-Free (HCF) programs due to Ben-Eliyahu and Dechter. Like an HCFprogram, an HEF program can be turned into an equivalent nondisjunctive programin polynomial time by shifting head atoms into the body.

Transition Systems for Model Generators - A Unifying Approach

  A fundamental task for propositional logic is to compute models ofpropositional formulas. Programs developed for this task are calledsatisfiability solvers. We show that transition systems introduced byNieuwenhuis, Oliveras, and Tinelli to model and analyze satisfiability solverscan be adapted for solvers developed for two other propositional formalisms:logic programming under the answer-set semantics, and the logic PC(ID). We showthat in each case the task of computing models can be seen as "satisfiabilitymodulo answer-set programming," where the goal is to find a model of a theorythat also is an answer set of a certain program. The unifying perspective wedevelop shows, in particular, that solvers CLASP and MINISATID are closelyrelated despite being developed for different formalisms, one for answer-setprogramming and the latter for the logic PC(ID).

Parsing Combinatory Categorial Grammar with Answer Set Programming:  Preliminary Report

  Combinatory categorial grammar (CCG) is a grammar formalism used for naturallanguage parsing. CCG assigns structured lexical categories to words and uses asmall set of combinatory rules to combine these categories to parse a sentence.In this work we propose and implement a new approach to CCG parsing that relieson a prominent knowledge representation formalism, answer set programming (ASP)- a declarative programming paradigm. We formulate the task of CCG parsing as aplanning problem and use an ASP computational tool to compute solutions thatcorrespond to valid parses. Compared to other approaches, there is no need toimplement a specific parsing algorithm using such a declarative method. Ourapproach aims at producing all semantically distinct parse trees for a givensentence. From this goal, normalization and efficiency issues arise, and wedeal with them by combining and extending existing strategies. We haveimplemented a CCG parsing tool kit - AspCcgTk - that uses ASP as its maincomputational means. The C&C supertagger can be used as a preprocessor withinAspCcgTk, which allows us to achieve wide-coverage natural language parsing.

First-Order Modular Logic Programs and their Conservative Extensions

  Modular logic programs provide a way of viewing logic programs as consistingof many independent, meaningful modules. This paper introduces first-ordermodular logic programs, which can capture the meaning of many answer setprograms. We also introduce conservative extensions of such programs. Thisconcept helps to identify strong relationships between modular programs as wellas between traditional programs. We show how the notion of a conservativeextension can be used to justify the common projection rewriting. This note isunder consideration for publication in Theory and Practice of LogicProgramming.

On Relation between Constraint Answer Set Programming and Satisfiability  Modulo Theories

  Constraint answer set programming is a promising research direction thatintegrates answer set programming with constraint processing. It is ofteninformally related to the field of satisfiability modulo theories. Yet, theexact formal link is obscured as the terminology and concepts used in these tworesearch areas differ. In this paper, we connect these two research areas byuncovering the precise formal relation between them. We believe that this workwill booster the cross-fertilization of the theoretical foundations and theexisting solving methods in both areas. As a step in this direction we providea translation from constraint answer set programs with integer linearconstraints to satisfiability modulo linear integer arithmetic that paves theway to utilizing modern satisfiability modulo theories solvers for computinganswer sets of constraint answer set programs.

Disjunctive Answer Set Solvers via Templates

  Answer set programming is a declarative programming paradigm oriented towardsdifficult combinatorial search problems. A fundamental task in answer setprogramming is to compute stable models, i.e., solutions of logic programs.Answer set solvers are the programs that perform this task. The problem ofdeciding whether a disjunctive program has a stable model is$\Sigma^P_2$-complete. The high complexity of reasoning within disjunctivelogic programming is responsible for few solvers capable of dealing with suchprograms, namely DLV, GnT, Cmodels, CLASP and WASP. In this paper we show thattransition systems introduced by Nieuwenhuis, Oliveras, and Tinelli to modeland analyze satisfiability solvers can be adapted for disjunctive answer setsolvers. Transition systems give a unifying perspective and bring clarity inthe description and comparison of solvers. They can be effectively used foranalyzing, comparing and proving correctness of search algorithms as well asinspiring new ideas in the design of disjunctive answer set solvers. In thislight, we introduce a general template, which accounts for major techniquesimplemented in disjunctive solvers. We then illustrate how this generaltemplate captures solvers DLV, GnT and Cmodels. We also show how this frameworkprovides a convenient tool for designing new solving algorithms by means ofcombinations of techniques employed in different solvers.

Constraint Answer Set Solver EZCSP and Why Integration Schemas Matter

  Researchers in answer set programming and constraint programming have spentsignificant efforts in the development of hybrid languages and solvingalgorithms combining the strengths of these traditionally separate fields.These efforts resulted in a new research area: constraint answer setprogramming. Constraint answer set programming languages and systems proved tobe successful at providing declarative, yet efficient solutions to problemsinvolving hybrid reasoning tasks. One of the main contributions of this paperis the first comprehensive account of the constraint answer set language andsolver EZCSP, a mainstream representative of this research area that has beenused in various successful applications. We also develop an extension of thetransition systems proposed by Nieuwenhuis et al. in 2006 to capture Booleansatisfiability solvers. We use this extension to describe the EZCSP algorithmand prove formal claims about it. The design and algorithmic details behindEZCSP clearly demonstrate that the development of the hybrid systems of thiskind is challenging. Many questions arise when one faces various design choicesin an attempt to maximize system's benefits. One of the key decisions that adeveloper of a hybrid solver makes is settling on a particular integrationschema within its implementation. Thus, another important contribution of thispaper is a thorough case study based on EZCSP, focused on the variousintegration schemas that it provides.  Under consideration in Theory and Practice of Logic Programming (TPLP).


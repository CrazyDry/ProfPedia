Abstract Answer Set Solvers with Learning

  Nieuwenhuis, Oliveras, and Tinelli (2006) showed how to describe enhancements
of the Davis-Putnam-Logemann-Loveland algorithm using transition systems,
instead of pseudocode. We design a similar framework for several algorithms
that generate answer sets for logic programs: Smodels, Smodels-cc, Asp-Sat with
Learning (Cmodels), and a newly designed and implemented algorithm Sup. This
approach to describing answer set solvers makes it easier to prove their
correctness, to compare them, and to design new systems.


Strong Equivalence and Program's Structure in Arguing Essential
  Equivalence between Logic Programs

  Answer set programming is a prominent declarative programming paradigm used
in formulating combinatorial search problems and implementing distinct
knowledge representation formalisms. It is common that several related and yet
substantially different answer set programs exist for a given problem.
Sometimes these encodings may display significantly different performance.
Uncovering {\em precise formal} links between these programs is often important
and yet far from trivial. This paper claims the correctness of a number of
interesting program rewritings.


Representing First-Order Causal Theories by Logic Programs

  Nonmonotonic causal logic, introduced by Norman McCain and Hudson Turner,
became a basis for the semantics of several expressive action languages.
McCain's embedding of definite propositional causal theories into logic
programming paved the way to the use of answer set solvers for answering
queries about actions described in such languages. In this paper we extend this
embedding to nondefinite theories and to first-order causal logic.


Proceedings of Answer Set Programming and Other Computing Paradigms
  (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest,
  Hungary

  This volume contains the papers presented at the fifth workshop on Answer Set
Programming and Other Computing Paradigms (ASPOCP 2012) held on September 4th,
2012 in Budapest, co-located with the 28th International Conference on Logic
Programming (ICLP 2012). It thus continues a series of previous events
co-located with ICLP, aiming at facilitating the discussion about crossing the
boundaries of current ASP techniques in theory, solving, and applications, in
combination with or inspired by other computing paradigms.


Abstract Modular Systems and Solvers

  Integrating diverse formalisms into modular knowledge representation systems
offers increased expressivity, modeling convenience and computational benefits.
We introduce concepts of abstract modules and abstract modular systems to study
general principles behind the design and analysis of model-finding programs, or
solvers, for integrated heterogeneous multi-logic systems. We show how abstract
modules and abstract modular systems give rise to transition systems, which are
a natural and convenient representation of solvers pioneered by the SAT
community. We illustrate our approach by showing how it applies to answer set
programming and propositional logic, and to multi-logic systems based on these
two formalisms.


Proceedings of Answer Set Programming and Other Computing Paradigms
  (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey

  This volume contains the papers presented at the sixth workshop on Answer Set
Programming and Other Computing Paradigms (ASPOCP 2013) held on August 25th,
2013 in Istanbul, co-located with the 29th International Conference on Logic
Programming (ICLP 2013). It thus continues a series of previous events
co-located with ICLP, aiming at facilitating the discussion about crossing the
boundaries of current ASP techniques in theory, solving, and applications, in
combination with or inspired by other computing paradigms.


The informal semantics of Answer Set Programming: A Tarskian perspective

  In Knowledge Representation, it is crucial that knowledge engineers have a
good understanding of the formal expressions that they write. What formal
expressions state intuitively about the domain of discourse is studied in the
theory of the informal semantics of a logic. In this paper we study the
informal semantics of Answer Set Programming. The roots of answer set
programming lie in the language of Extended Logic Programming, which was
introduced initially as an epistemic logic for default and autoepistemic
reasoning. In 1999, the seminal papers on answer set programming proposed to
use this logic for a different purpose, namely, to model and solve search
problems. Currently, the language is used primarily in this new role. However,
the original epistemic intuitions lose their explanatory relevance in this new
context. How answer set programs are connected to the specifications of
problems they model is more easily explained in a classical Tarskian semantics,
in which models correspond to possible worlds, rather than to belief states of
an epistemic agent. In this paper, we develop a new theory of the informal
semantics of answer set programming, which is formulated in the Tarskian
setting and based on Frege's compositionality principle. It differs
substantially from the earlier epistemic theory of informal semantics,
providing a different view on the meaning of the connectives in answer set
programming and on its relation to other logics, in particular classical logic.


On Elementary Loops of Logic Programs

  Using the notion of an elementary loop, Gebser and Schaub refined the theorem
on loop formulas due to Lin and Zhao by considering loop formulas of elementary
loops only. In this article, we reformulate their definition of an elementary
loop, extend it to disjunctive programs, and study several properties of
elementary loops, including how maximal elementary loops are related to minimal
unfounded sets. The results provide useful insights into the stable model
semantics in terms of elementary loops. For a nondisjunctive program, using a
graph-theoretic characterization of an elementary loop, we show that the
problem of recognizing an elementary loop is tractable. On the other hand, we
show that the corresponding problem is {\sf coNP}-complete for a disjunctive
program. Based on the notion of an elementary loop, we present the class of
Head-Elementary-loop-Free (HEF) programs, which strictly generalizes the class
of Head-Cycle-Free (HCF) programs due to Ben-Eliyahu and Dechter. Like an HCF
program, an HEF program can be turned into an equivalent nondisjunctive program
in polynomial time by shifting head atoms into the body.


Transition Systems for Model Generators - A Unifying Approach

  A fundamental task for propositional logic is to compute models of
propositional formulas. Programs developed for this task are called
satisfiability solvers. We show that transition systems introduced by
Nieuwenhuis, Oliveras, and Tinelli to model and analyze satisfiability solvers
can be adapted for solvers developed for two other propositional formalisms:
logic programming under the answer-set semantics, and the logic PC(ID). We show
that in each case the task of computing models can be seen as "satisfiability
modulo answer-set programming," where the goal is to find a model of a theory
that also is an answer set of a certain program. The unifying perspective we
develop shows, in particular, that solvers CLASP and MINISATID are closely
related despite being developed for different formalisms, one for answer-set
programming and the latter for the logic PC(ID).


Parsing Combinatory Categorial Grammar with Answer Set Programming:
  Preliminary Report

  Combinatory categorial grammar (CCG) is a grammar formalism used for natural
language parsing. CCG assigns structured lexical categories to words and uses a
small set of combinatory rules to combine these categories to parse a sentence.
In this work we propose and implement a new approach to CCG parsing that relies
on a prominent knowledge representation formalism, answer set programming (ASP)
- a declarative programming paradigm. We formulate the task of CCG parsing as a
planning problem and use an ASP computational tool to compute solutions that
correspond to valid parses. Compared to other approaches, there is no need to
implement a specific parsing algorithm using such a declarative method. Our
approach aims at producing all semantically distinct parse trees for a given
sentence. From this goal, normalization and efficiency issues arise, and we
deal with them by combining and extending existing strategies. We have
implemented a CCG parsing tool kit - AspCcgTk - that uses ASP as its main
computational means. The C&C supertagger can be used as a preprocessor within
AspCcgTk, which allows us to achieve wide-coverage natural language parsing.


First-Order Modular Logic Programs and their Conservative Extensions

  Modular logic programs provide a way of viewing logic programs as consisting
of many independent, meaningful modules. This paper introduces first-order
modular logic programs, which can capture the meaning of many answer set
programs. We also introduce conservative extensions of such programs. This
concept helps to identify strong relationships between modular programs as well
as between traditional programs. We show how the notion of a conservative
extension can be used to justify the common projection rewriting. This note is
under consideration for publication in Theory and Practice of Logic
Programming.


On Relation between Constraint Answer Set Programming and Satisfiability
  Modulo Theories

  Constraint answer set programming is a promising research direction that
integrates answer set programming with constraint processing. It is often
informally related to the field of satisfiability modulo theories. Yet, the
exact formal link is obscured as the terminology and concepts used in these two
research areas differ. In this paper, we connect these two research areas by
uncovering the precise formal relation between them. We believe that this work
will booster the cross-fertilization of the theoretical foundations and the
existing solving methods in both areas. As a step in this direction we provide
a translation from constraint answer set programs with integer linear
constraints to satisfiability modulo linear integer arithmetic that paves the
way to utilizing modern satisfiability modulo theories solvers for computing
answer sets of constraint answer set programs.


Disjunctive Answer Set Solvers via Templates

  Answer set programming is a declarative programming paradigm oriented towards
difficult combinatorial search problems. A fundamental task in answer set
programming is to compute stable models, i.e., solutions of logic programs.
Answer set solvers are the programs that perform this task. The problem of
deciding whether a disjunctive program has a stable model is
$\Sigma^P_2$-complete. The high complexity of reasoning within disjunctive
logic programming is responsible for few solvers capable of dealing with such
programs, namely DLV, GnT, Cmodels, CLASP and WASP. In this paper we show that
transition systems introduced by Nieuwenhuis, Oliveras, and Tinelli to model
and analyze satisfiability solvers can be adapted for disjunctive answer set
solvers. Transition systems give a unifying perspective and bring clarity in
the description and comparison of solvers. They can be effectively used for
analyzing, comparing and proving correctness of search algorithms as well as
inspiring new ideas in the design of disjunctive answer set solvers. In this
light, we introduce a general template, which accounts for major techniques
implemented in disjunctive solvers. We then illustrate how this general
template captures solvers DLV, GnT and Cmodels. We also show how this framework
provides a convenient tool for designing new solving algorithms by means of
combinations of techniques employed in different solvers.


Constraint Answer Set Solver EZCSP and Why Integration Schemas Matter

  Researchers in answer set programming and constraint programming have spent
significant efforts in the development of hybrid languages and solving
algorithms combining the strengths of these traditionally separate fields.
These efforts resulted in a new research area: constraint answer set
programming. Constraint answer set programming languages and systems proved to
be successful at providing declarative, yet efficient solutions to problems
involving hybrid reasoning tasks. One of the main contributions of this paper
is the first comprehensive account of the constraint answer set language and
solver EZCSP, a mainstream representative of this research area that has been
used in various successful applications. We also develop an extension of the
transition systems proposed by Nieuwenhuis et al. in 2006 to capture Boolean
satisfiability solvers. We use this extension to describe the EZCSP algorithm
and prove formal claims about it. The design and algorithmic details behind
EZCSP clearly demonstrate that the development of the hybrid systems of this
kind is challenging. Many questions arise when one faces various design choices
in an attempt to maximize system's benefits. One of the key decisions that a
developer of a hybrid solver makes is settling on a particular integration
schema within its implementation. Thus, another important contribution of this
paper is a thorough case study based on EZCSP, focused on the various
integration schemas that it provides.
  Under consideration in Theory and Practice of Logic Programming (TPLP).



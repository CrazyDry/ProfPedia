Paraconsistency and Word Puzzles

  Word puzzles and the problem of their representations in logic languages havereceived considerable attention in the last decade (Ponnuru et al. 2004;Shapiro 2011; Baral and Dzifcak 2012; Schwitter 2013). Of special interest isthe problem of generating such representations directly from natural language(NL) or controlled natural language (CNL). An interesting variation of thisproblem, and to the best of our knowledge, scarcely explored variation in thiscontext, is when the input information is inconsistent. In such situations, theexisting encodings of word puzzles produce inconsistent representations andbreak down. In this paper, we bring the well-known type of paraconsistentlogics, called Annotated Predicate Calculus (APC) (Kifer and Lozinskii 1992),to bear on the problem. We introduce a new kind of non-monotonic semantics forAPC, called consistency preferred stable models and argue that it makes APCinto a suitable platform for dealing with inconsistency in word puzzles and,more generally, in NL sentences. We also devise a number of general principlesto help the user choose among the different representations of NL sentences,which might seem equivalent but, in fact, behave differently when inconsistentinformation is taken into account. These principles can be incorporated intoexisting CNL translators, such as Attempto Controlled English (ACE) (Fuchs etal. 2008) and PENG Light (White and Schwitter 2009). Finally, we show that APCwith the consistency preferred stable model semantics can be equivalentlyembedded in ASP with preferences over stable models, and we use this embeddingto implement this version of APC in Clingo (Gebser et al. 2011) and its Asprinadd-on (Brewka et al. 2015).

Differentially Private Hierarchical Count-of-Counts Histograms

  We consider the problem of privately releasing a class of queries that wecall hierarchical count-of-counts histograms. Count-of-counts histogramspartition the rows of an input table into groups (e.g., group of people in thesame household), and for every integer j report the number of groups of size j.Hierarchical count-of-counts queries report count-of-counts histograms atdifferent granularities as per hierarchy defined on an attribute in the inputdata (e.g., geographical location of a household at the national, state andcounty levels). In this paper, we introduce this problem, along withappropriate error metrics and propose a differentially private solution thatgenerates count-of-counts histograms that are consistent across all levels ofthe hierarchy.

Taming the Infinite Chase: Query Answering under Expressive Integrity  Constraints

  The chase algorithm is a fundamental tool for query evaluation and querycontainment under constraints, where the constraints are (sub-classes of)tuple-generating dependencies (TGDs) and equality generating depencies (EGDs).So far, most of the research on this topic has focused on cases where the chaseprocedure terminates, with some notable exceptions. In this paper we take ageneral approach, and we propose large classes of TGDs under which the chasedoes not always terminate. Our languages, in particular, are inspired byguarded logic: we show that by enforcing syntactic properties on the form ofthe TGDs, we are able to ensure decidability of the problem of answeringconjunctive queries despite the non-terminating chase. We provide tightcomplexity bounds for the problem of conjunctive query evaluation for severalclasses of TGDs. We then introduce EGDs, and provide a condition under whichEGDs do not interact with TGDs, and therefore do not take part in queryanswering. We show applications of our classes of constraints to the problem ofanswering conjunctive queries under F-Logic Lite, a recently introducedontology language, and under prominent tractable Description Logics languages.All the results in this paper immediately extend to the problem of conjunctivequery containment.

Understanding Rulelog Computations in Silk

  Rulelog is a knowledge representation and reasoning language based on logicprogramming under the well-founded semantics. It is an extension of thelanguage of Flora-2 and so supports inheritance and other object-orientedfeatures, as well as the higher-order syntax of Hilog. However, Rulelog rulesmay also contain quantifiers and may be contra-positional. In addition, theserules are evaluated in the presence of defeasibility mechanisms that includerule cancellation, rule priorities, and other aspects. Rulelog programs aresometimes developed by loosely coordinated teams of knowledge engineers (KEs)who are not necessarily programmers. This requires not only declarativedebugging support, but also support for profiling to help KEs understand theoverall structure of a computation, including its termination properties. Thedesign of debugging and profiling tools is made more challenging becauseRulelog programs undergo a series of transformations into normal programs, sothat there is a cognitive distance between how rules are specified and how theyare executed.  In this paper, we describe the debugging and profiling environment forRulelog implemented in the integrated development environment of the Silksystem. Our approach includes an interface to justification graphs, which treatwhy-not and defeasibility as well as provenance of the rules supportinganswers. It also includes tools for trace-based analysis of computations topermit understanding of erroneous non-termination and of general performanceissues. For semantically correct cases of the non-terminating behavior, Silkoffers a different approach, which addresses the problem in a formally soundmanner by leveraging a form of bounded rationality called restraint.


Revisiting Epistemic Specifications

  In 1991, Michael Gelfond introduced the language of epistemic specifications.The goal was to develop tools for modeling problems that require some form ofmeta-reasoning, that is, reasoning over multiple possible worlds. Despite theirrelevance to knowledge representation, epistemic specifications have receivedrelatively little attention so far. In this paper, we revisit the formalism ofepistemic specification. We offer a new definition of the formalism, proposeseveral semantics (one of which, under syntactic restrictions we assume, turnsout to be equivalent to the original semantics by Gelfond), derive somecomplexity results and, finally, show the effectiveness of the formalism formodeling problems requiring meta-reasoning considered recently by Faber andWoltran. All these results show that epistemic specifications deserve much moreattention that has been afforded to them so far.

Vicious Circle Principle and Logic Programs with Aggregates

  The paper presents a knowledge representation language $\mathcal{A}log$ whichextends ASP with aggregates. The goal is to have a language based on simplesyntax and clear intuitive and mathematical semantics. We give some propertiesof $\mathcal{A}log$, an algorithm for computing its answer sets, and comparisonwith other approaches.

Vicious Circle Principle and Logic Programs with Aggregates

  The paper presents a knowledge representation language $\mathcal{A}log$ whichextends ASP with aggregates. The goal is to have a language based on simplesyntax and clear intuitive and mathematical semantics. We give some propertiesof $\mathcal{A}log$, an algorithm for computing its answer sets, and comparisonwith other approaches.

Language ASP{f} with Arithmetic Expressions and Consistency-Restoring  Rules

  In this paper we continue the work on our extension of Answer Set Programmingby non-Herbrand functions and add to the language support for arithmeticexpressions and various inequality relations over non-Herbrand functions, aswell as consistency-restoring rules from CR-Prolog. We demonstrate the use ofthis latest version of the language in the representation of important kinds ofknowledge.

Diagnostic reasoning with A-Prolog

  In this paper we suggest an architecture for a software agent which operatesa physical device and is capable of making observations and of testing andrepairing the device's components. We present simplified definitions of thenotions of symptom, candidate diagnosis, and diagnosis which are based on thetheory of action language ${\cal AL}$. The definitions allow one to give asimple account of the agent's behavior in which many of the agent's tasks arereduced to computing stable models of logic programs.

Probabilistic reasoning with answer sets

  This paper develops a declarative language, P-log, that combines logical andprobabilistic arguments in its reasoning. Answer Set Prolog is used as thelogical foundation, while causal Bayes nets serve as a probabilisticfoundation. We give several non-trivial examples and illustrate the use ofP-log for knowledge representation and updating of knowledge. We argue that ourapproach to updates is more appealing than existing approaches. We givesufficiency conditions for the coherency of P-log programs and show that Bayesnets can be easily mapped to coherent P-log programs.

Modular Action Language ALM

  The paper introduces a new modular action language, ALM, and illustrates themethodology of its use. It is based on the approach of Gelfond and Lifschitz(1993; 1998) in which a high-level action language is used as a front end for alogic programming system description. The resulting logic programmingrepresentation is used to perform various computational tasks. The methodologybased on existing action languages works well for small and even medium sizesystems, but is not meant to deal with larger systems that require structuringof knowledge. ALM is meant to remedy this problem. Structuring of knowledge inALM is supported by the concepts of module (a formal description of a specificpiece of knowledge packaged as a unit), module hierarchy, and library, and bythe division of a system description of ALM into two parts: theory andstructure. A theory consists of one or more modules with a common theme,possibly organized into a module hierarchy based on a dependency relation. Itcontains declarations of sorts, attributes, and properties of the domaintogether with axioms describing them. Structures are used to describe thedomain's objects. These features, together with the means for defining classesof a domain as special cases of previously defined ones, facilitate thestepwise development, testing, and readability of a knowledge base, as well asthe creation of knowledge representation libraries. To appear in Theory andPractice of Logic Programming (TPLP).

SPARC - Sorted ASP with Consistency Restoring Rules

  This is a preliminary report on the work aimed at making CR-Prolog -- aversion of ASP with consistency restoring rules -- more suitable for use inteaching and large applications. First we describe a sorted version ofCR-Prolog called SPARC. Second, we translate a basic version of the CR-Prologinto the language of DLV and compare the performance with the state of the artCR-Prolog solver. The results form the foundation for future more efficient anduser friendly implementation of SPARC and shed some light on the relationshipbetween two useful knowledge representation constructs: consistency restoringrules and weak constraints of DLV.

An Algebra of Causal Chains

  In this work we propose a multi-valued extension of logic programs under thestable models semantics where each true atom in a model is associated with aset of justifications, in a similar spirit than a set of proof trees. The maincontribution of this paper is that we capture justifications into an algebra oftruth values with three internal operations: an addition '+' representingalternative justifications for a formula, a commutative product '*'representing joint interaction of causes and a non-commutative product '.'acting as a concatenation or proof constructor. Using this multi-valuedsemantics, we obtain a one-to-one correspondence between the syntactic prooftree of a standard (non-causal) logic program and the interpretation of eachtrue atom in a model. Furthermore, thanks to this algebraic characterization wecan detect semantic properties like redundancy and relevance of the obtainedjustifications. We also identify a lattice-based characterization of thisalgebra, defining a direct consequences operator, proving its continuity andthat its least fix point can be computed after a finite number of iterations.Finally, we define the concept of causal stable model by introducing ananalogous transformation to Gelfond and Lifschitz's program reduct.

KR$^3$: An Architecture for Knowledge Representation and Reasoning in  Robotics

  This paper describes an architecture that combines the complementarystrengths of declarative programming and probabilistic graphical models toenable robots to represent, reason with, and learn from, qualitative andquantitative descriptions of uncertainty and knowledge. An action language isused for the low-level (LL) and high-level (HL) system descriptions in thearchitecture, and the definition of recorded histories in the HL is expanded toallow prioritized defaults. For any given goal, tentative plans created in theHL using default knowledge and commonsense reasoning are implemented in the LLusing probabilistic algorithms, with the corresponding observations used toupdate the HL history. Tight coupling between the two levels enables automaticselection of relevant variables and generation of suitable action policies inthe LL for each HL action, and supports reasoning with violation of defaults,noisy observations and unreliable actions in large and complex domains. Thearchitecture is evaluated in simulation and on physical robots transportingobjects in indoor domains; the benefit on robots is a reduction in taskexecution time of 39% compared with a purely probabilistic, but stillhierarchical, approach.

Causal Graph Justifications of Logic Programs

  In this work we propose a multi-valued extension of logic programs under thestable models semantics where each true atom in a model is associated with aset of justifications. These justifications are expressed in terms of causalgraphs formed by rule labels and edges that represent their applicationordering. For positive programs, we show that the causal justificationsobtained for a given atom have a direct correspon- dence to (relevant)syntactic proofs of that atom using the program rules involved in the graphs.The most interesting contribution is that this causal information is obtainedin a purely semantic way, by algebraic op- erations (product, sum andapplication) on a lattice of causal values whose ordering relation expresseswhen a justification is stronger than another. Finally, for programs withnegation, we define the concept of causal stable model by introducing ananalogous transformation to Gelfond and Lifschitz's program reduct. As aresult, default negation behaves as "absence of proof" and no justification isderived from negative liter

Vicious Circle Principle and Formation of Sets in ASP Based Languages

  The paper continues the investigation of Poincare and Russel's Vicious CirclePrinciple (VCP) in the context of the design of logic programming languageswith sets. We expand previously introduced language Alog with aggregates byallowing infinite sets and several additional set related constructs useful forknowledge representation and teaching. In addition, we propose an alternativeformalization of the original VCP and incorporate it into the semantics of newlanguage, Slog+, which allows more liberal construction of sets and their usein programming rules. We show that, for programs without disjunction andinfinite sets, the formal semantics of aggregates in Slog+ coincides with thatof several other known languages. Their intuitive and formal semantics,however, are based on quite different ideas and seem to be more involved thanthat of Slog+.

REBA: A Refinement-Based Architecture for Knowledge Representation and  Reasoning in Robotics

  This paper describes an architecture for robots that combines thecomplementary strengths of probabilistic graphical models and declarativeprogramming to represent and reason with logic-based and probabilisticdescriptions of uncertainty and domain knowledge. An action language isextended to support non-boolean fluents and non-deterministic causal laws. Thisaction language is used to describe tightly-coupled transition diagrams at twolevels of granularity, with a fine-resolution transition diagram defined as arefinement of a coarse-resolution transition diagram of the domain. Thecoarse-resolution system description, and a history that includes (prioritized)defaults, are translated into an Answer Set Prolog (ASP) program. For any givengoal, inference in the ASP program provides a plan of abstract actions. Toimplement each such abstract action, the robot automatically zooms to the partof the fine-resolution transition diagram relevant to this action. Aprobabilistic representation of the uncertainty in sensing and actuation isthen included in this zoomed fine-resolution system description, and used toconstruct a partially observable Markov decision process (POMDP). The policyobtained by solving the POMDP is invoked repeatedly to implement the abstractaction as a sequence of concrete actions, with the corresponding observationsbeing recorded in the coarse-resolution history and used for subsequentreasoning. The architecture is evaluated in simulation and on a mobile robotmoving objects in an indoor domain, to show that it supports reasoning withviolation of defaults, noisy observations and unreliable actions, in complexdomains.


CloneCloud: Boosting Mobile Device Applications Through Cloud Clone  Execution

  Mobile applications are becoming increasingly ubiquitous and provide everricher functionality on mobile devices. At the same time, such devices oftenenjoy strong connectivity with more powerful machines ranging from laptops anddesktops to commercial clouds. This paper presents the design andimplementation of CloneCloud, a system that automatically transforms mobileapplications to benefit from the cloud. The system is a flexible applicationpartitioner and execution runtime that enables unmodified mobile applicationsrunning in an application-level virtual machine to seamlessly off-load part oftheir execution from mobile devices onto device clones operating in acomputational cloud. CloneCloud uses a combination of static analysis anddynamic profiling to optimally and automatically partition an application sothat it migrates, executes in the cloud, and re-integrates computation in afine-grained manner that makes efficient use of resources. Our evaluation showsthat CloneCloud can achieve up to 21.2x speedup of smartphone applications wetested and it allows different partitioning for different inputs and networks.

Mantis: Predicting System Performance through Program Analysis and  Modeling

  We present Mantis, a new framework that automatically predicts programperformance with high accuracy. Mantis integrates techniques from programminglanguage and machine learning for performance modeling, and is a radicaldeparture from traditional approaches. Mantis extracts program features, whichare information about program execution runs, through program instrumentation.It uses machine learning techniques to select features relevant to performanceand creates prediction models as a function of the selected features. Throughprogram analysis, it then generates compact code slices that compute thesefeature values for prediction. Our evaluation shows that Mantis can achievemore than 93% accuracy with less than 10% training data set, which is asignificant improvement over models that are oblivious to program features. Thesystem generates code slices that are cheap to compute feature values.

Learning Neurosymbolic Generative Models via Program Synthesis

  Significant strides have been made toward designing better generative modelsin recent years. Despite this progress, however, state-of-the-art approachesare still largely unable to capture complex global structure in data. Forexample, images of buildings typically contain spatial patterns such as windowsrepeating at regular intervals; state-of-the-art generative methods can'teasily reproduce these structures. We propose to address this problem byincorporating programs representing global structure into the generativemodel---e.g., a 2D for-loop may represent a configuration of windows.Furthermore, we propose a framework for learning these models by leveragingprogram synthesis to generate training data. On both synthetic and real-worlddata, we demonstrate that our approach is substantially better than thestate-of-the-art at both generating and completing images that contain globalstructure.

PolyDroid: Learning-Driven Specialization of Mobile Applications

  The increasing prevalence of mobile apps has led to a proliferation ofresource usage scenarios in which they are deployed. This motivates the need tospecialize mobile apps based on diverse and varying preferences of users. Wepropose a system, called PolyDroid, for automatically specializing mobile appsbased on user preferences. The app developer provides a number of candidateconfigurations, called reductions, that limit the resource usage of theoriginal app. The key challenge underlying PolyDroid concerns learning thequality of user experience under different reductions. We propose an activelearning technique that requires few user experiments to determine the optimalreduction for a given resource usage specification. On a benchmark suitecomprising 20 diverse, open-source Android apps, we demonstrate that onaverage, PolyDroid obtains more than 85% of the optimal performance using justtwo user experiments.


CloneCloud: Boosting Mobile Device Applications Through Cloud Clone
  Execution

  Mobile applications are becoming increasingly ubiquitous and provide ever
richer functionality on mobile devices. At the same time, such devices often
enjoy strong connectivity with more powerful machines ranging from laptops and
desktops to commercial clouds. This paper presents the design and
implementation of CloneCloud, a system that automatically transforms mobile
applications to benefit from the cloud. The system is a flexible application
partitioner and execution runtime that enables unmodified mobile applications
running in an application-level virtual machine to seamlessly off-load part of
their execution from mobile devices onto device clones operating in a
computational cloud. CloneCloud uses a combination of static analysis and
dynamic profiling to optimally and automatically partition an application so
that it migrates, executes in the cloud, and re-integrates computation in a
fine-grained manner that makes efficient use of resources. Our evaluation shows
that CloneCloud can achieve up to 21.2x speedup of smartphone applications we
tested and it allows different partitioning for different inputs and networks.


Mantis: Predicting System Performance through Program Analysis and
  Modeling

  We present Mantis, a new framework that automatically predicts program
performance with high accuracy. Mantis integrates techniques from programming
language and machine learning for performance modeling, and is a radical
departure from traditional approaches. Mantis extracts program features, which
are information about program execution runs, through program instrumentation.
It uses machine learning techniques to select features relevant to performance
and creates prediction models as a function of the selected features. Through
program analysis, it then generates compact code slices that compute these
feature values for prediction. Our evaluation shows that Mantis can achieve
more than 93% accuracy with less than 10% training data set, which is a
significant improvement over models that are oblivious to program features. The
system generates code slices that are cheap to compute feature values.


Learning Neurosymbolic Generative Models via Program Synthesis

  Significant strides have been made toward designing better generative models
in recent years. Despite this progress, however, state-of-the-art approaches
are still largely unable to capture complex global structure in data. For
example, images of buildings typically contain spatial patterns such as windows
repeating at regular intervals; state-of-the-art generative methods can't
easily reproduce these structures. We propose to address this problem by
incorporating programs representing global structure into the generative
model---e.g., a 2D for-loop may represent a configuration of windows.
Furthermore, we propose a framework for learning these models by leveraging
program synthesis to generate training data. On both synthetic and real-world
data, we demonstrate that our approach is substantially better than the
state-of-the-art at both generating and completing images that contain global
structure.


PolyDroid: Learning-Driven Specialization of Mobile Applications

  The increasing prevalence of mobile apps has led to a proliferation of
resource usage scenarios in which they are deployed. This motivates the need to
specialize mobile apps based on diverse and varying preferences of users. We
propose a system, called PolyDroid, for automatically specializing mobile apps
based on user preferences. The app developer provides a number of candidate
configurations, called reductions, that limit the resource usage of the
original app. The key challenge underlying PolyDroid concerns learning the
quality of user experience under different reductions. We propose an active
learning technique that requires few user experiments to determine the optimal
reduction for a given resource usage specification. On a benchmark suite
comprising 20 diverse, open-source Android apps, we demonstrate that on
average, PolyDroid obtains more than 85% of the optimal performance using just
two user experiments.


